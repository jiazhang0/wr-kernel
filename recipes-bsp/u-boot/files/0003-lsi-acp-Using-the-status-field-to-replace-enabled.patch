From 11cfb58be77c794fa0d91a01cc181455ccbd442b Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Fri, 29 Nov 2013 17:43:16 +0800
Subject: [PATCH 3/3] lsi:acp:Using the 'status' field to replace 'enabled'

Using the standard 'status' field to reflect device assigned to each
osgroups.

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 board/lsi/axxia-ppc/osg.c |  567 ++++++++++++++++-----------------------------
 1 file changed, 194 insertions(+), 373 deletions(-)

diff --git a/board/lsi/axxia-ppc/osg.c b/board/lsi/axxia-ppc/osg.c
index 6d60273..1cd3f36 100644
--- a/board/lsi/axxia-ppc/osg.c
+++ b/board/lsi/axxia-ppc/osg.c
@@ -689,6 +689,66 @@ acp_osg_dump(int group)
 
 /*
   ------------------------------------------------------------------------------
+  acp_osg_update_dt_device
+
+	return value:
+	* 1, device status ok,
+	* 0, device status disable
+	* -1, no such device or update device successful
+*/
+
+static int
+acp_osg_update_dt_device_status(
+	struct fdt_header *dt,
+	int group,
+	acp_osg_group_res_t device)
+{
+	const char *status_str;
+	const char *dev_str[] = {
+		NULL, /*ACP_OS_BOOT_CORE*/
+		NULL, /*ACP_OS_CORES*/
+		NULL, /*ACP_OS_BASE*/
+		NULL, /*ACP_OS_SIZE*/
+		"/plb/opb/serial@00404000", /*ACP_OS_UART0*/
+		"/plb/opb/serial@00405000", /*ACP_OS_UART1*/
+		"/plb/opb/nand@00440000", /*ACP_OS_NAND*/
+		"/plb/opb/femac@00480000", /* ACP_OS_FEMAC*/
+		"/pciex@f00c0000", /*ACP_OS_PCIE0*/
+		"/pciex@f00c8000", /*ACP_OS_PCIE1*/
+		"/pciex@f00d0000", /*ACP_OS_PCIE2*/
+		"/rapidio@f0020000", /*ACP_OS_SRIO*/
+		"/plb/opb/usb@004a4000", /*ACP_OS_USB*/
+		NULL, /*ACP_OS_PLX*/
+		"/plb/opb/sbb", /*ACP_OS_SBB*/
+		"/plb/opb/ssp@00402000", /*ACP_OS_SSP*/
+		"/plb/opb/i2c@00403000", /*ACP_OS_I2C*/
+		/*ACP_OS_FDT*/
+	};
+	int ret;
+	int rc;
+
+	if ((device >= ACP_OS_FDT) || (!dev_str[device]))
+		return -1;
+
+	if (0 != acp_osg_group_get_res(group, device)) {
+		status_str = "ok";
+		ret = 1;
+	} else {
+		status_str = "disabled";
+		ret = 0;
+	}
+
+	rc = fdt_find_and_setprop(dt, dev_str[device],
+				  "status", status_str,
+				  strlen(status_str) + 1, 1);
+	if (0 != rc)
+		return -1;
+	else
+		return ret;
+}
+
+/*
+  ------------------------------------------------------------------------------
   acp_osg_update_dt
 */
 
@@ -696,6 +756,7 @@ static int
 acp_osg_update_dt(void *input, int group)
 {
 	int rc = -1;
+	int ret;
 	struct fdt_header *dt = input;
 	char *core[] = {
 		"/cpus/cpu@0",
@@ -708,15 +769,6 @@ acp_osg_update_dt(void *input, int group)
 	int i;
 	unsigned long value;
 	unsigned long group_base_address;
-	char *status[] = {"disabled", "ok"};
-	int ethaddr_size;
-	char ethaddr_string[18];
-	unsigned char ethaddr[6];
-	char *string;
-	char *endp;
-	int nodeoffset;
-	const struct fdt_property *property;
-	unsigned long *dma_ranges;
 
 	/*
 	  ============================================================
@@ -790,149 +842,63 @@ acp_osg_update_dt(void *input, int group)
 		}
 	}
 
-	/*
-	  ============================================================
-	  Update the peripherals.
-	*/
-
-	/* UART 0 */
-
-	if (0 != acp_osg_group_get_res(group, ACP_OS_UART0))
-		value = 1;
-	else
-		value = 0;
-
 	rc = fdt_find_and_setprop(dt, "/plb/opb/serial@00404000",
-				  "enabled", (void *)&value,
-				  sizeof(unsigned long), 1);
-	rc |= fdt_find_and_setprop(dt, "/plb/opb/serial@00404000",
-				   "status", (void *)status[value],
-				   strlen(status[value]) + 1, 1);
-	rc |= fdt_find_and_setprop(dt, "/plb/opb/serial@00404000",
-				   "current-speed",
-				   (void *)&gd->baudrate,
-				   sizeof(unsigned long), 1);
-	rc != fdt_find_and_setprop(dt, "/plb/opb/serial@00404000",
+				  "clock-frequency",
+				  (void *)&clk_per, sizeof(unsigned long), 1);
+	rc |= fdt_find_and_setprop(dt, "/plb/opb/serial@00405000",
 				   "clock-frequency",
-				   (void *)&clk_per,
-				   sizeof(unsigned long), 1);
+				   (void *)&clk_per, sizeof(unsigned long), 1);
 
 	if (0 != rc) {
-		rc = fdt_find_and_setprop(dt, "/plb/opb/serial0",
-					  "enabled", (void *)&value,
-					  sizeof(unsigned long), 1);
-		rc |= fdt_find_and_setprop(dt, "/plb/opb/serial0",
-					   "enabled", (void *)&value,
-					   sizeof(unsigned long), 1);
-		rc |= fdt_find_and_setprop(dt, "/plb/opb/serial0",
-					   "status",
-					   (void *)status[value],
-					   strlen(status[value]) + 1, 1);
-		rc |= fdt_find_and_setprop(dt, "/plb/opb/serial0",
+		printf("Error setting up the UARTs\n");
+		return -1;
+	}
+
+	/*
+	  ============================================================
+	  Update the peripherals.
+	*/
+	ret = acp_osg_update_dt_device_status(dt, group, ACP_OS_UART0);
+	if (ret < 0)
+		return -1;
+	if (ret > 0) {
+		rc = fdt_find_and_setprop(dt, "/plb/opb/serial@00404000",
 					   "current-speed",
 					   (void *)&gd->baudrate,
 					   sizeof(unsigned long), 1);
-		rc != fdt_find_and_setprop(dt, "/plb/opb/serial0",
-					   "clock-frequency",
-					   (void *)&clk_per,
-					   sizeof(unsigned long), 1);
+
+		if (0 != rc)
+			return -1;
 	}
 
-	if (0 != rc)
+	ret = acp_osg_update_dt_device_status(dt, group, ACP_OS_UART1);
+	if (ret < 0)
 		return -1;
 
-	/* UART 1 */
-
-	if (0 != acp_osg_group_get_res(group, ACP_OS_UART1))
-		value = 1;
-	else
-		value = 0;
-
-	rc = fdt_find_and_setprop(dt, "/plb/opb/serial@00405000",
-				  "enabled", (void *)&value,
-				  sizeof(unsigned long), 1);
-	rc |= fdt_find_and_setprop(dt, "/plb/opb/serial@00405000",
-				   "status", (void *)status[value],
-				   strlen(status[value]) + 1, 1);
-	rc |= fdt_find_and_setprop(dt, "/plb/opb/serial@00405000",
-				   "current-speed",
-				   (void *)&gd->baudrate,
-				   sizeof(unsigned long), 1);
-	rc |= fdt_find_and_setprop(dt, "/plb/opb/serial@00405000",
-				   "clock-frequency",
-				   (void *)&clk_per,
-				   sizeof(unsigned long), 1);
-
-	if (0 != rc) {
-		rc = fdt_find_and_setprop(dt, "/plb/opb/serial1",
-					  "enabled", (void *)&value,
-					  sizeof(unsigned long), 1);
-		rc |= fdt_find_and_setprop(dt, "/plb/opb/serial1",
-					   "status",
-					   (void *)status[value],
-					   strlen(status[value]) + 1, 1);
-		rc |= fdt_find_and_setprop(dt, "/plb/opb/serial1",
+	if (ret > 0) {
+		rc = fdt_find_and_setprop(dt, "/plb/opb/serial@00405000",
 					   "current-speed",
 					   (void *)&gd->baudrate,
 					   sizeof(unsigned long), 1);
-		rc |= fdt_find_and_setprop(dt, "/plb/opb/serial1",
-					   "clock-frequency",
-					   (void *)&clk_per,
-					   sizeof(unsigned long), 1);
+		if (0 != rc)
+			return -1;
 	}
 
-	if (0 != rc)
+	ret = acp_osg_update_dt_device_status(dt, group, ACP_OS_NAND);
+	if (ret < 0)
 		return -1;
 
-	/* NAND */
-
-	if (0 != acp_osg_group_get_res(group, ACP_OS_NAND))
-		value = 1;
-	else
-		value = 0;
-
-	rc = fdt_find_and_setprop(dt, "/plb/opb/nand@00440000",
-				  "enabled", (void *)&value,
-				  sizeof(unsigned long), 1);
-
-	if (0 != rc) {
-		rc = fdt_find_and_setprop(dt, "/plb/opb/nand0",
-					  "enabled", (void *)&value,
-					  sizeof(unsigned long), 1);
-		rc |= fdt_find_and_setprop(dt, "/plb/opb/nand0",
-					   "status", (void *)status[value],
-					   strlen(status[value]) + 1, 1);
-	}
-
-	if (0 != rc)
+	ret = acp_osg_update_dt_device_status(dt, group, ACP_OS_FEMAC);
+	if (ret < 0)
 		return -1;
 
-	/* FEMAC */
-
-	if (0 != acp_osg_group_get_res(group, ACP_OS_FEMAC))
-		value = 1;
-	else
-		value = 0;
-
-	rc = fdt_find_and_setprop(dt, "/plb/opb/femac@00480000",
-				  "enabled", (void *)&value,
-				  sizeof(unsigned long), 1);
-
-	if (0 != rc) {
-		rc = fdt_find_and_setprop(dt, "/plb/opb/femac0",
-					  "status",
-					  (void *)status[value],
-					  strlen(status[value]) + 1, 1);
-		/* Add enabled for now to support older kernels. */
-		rc |= fdt_find_and_setprop(dt, "/plb/opb/femac0",
-					   "enabled", (void *)&value,
-					   sizeof(unsigned long), 1);
-	}
-
-	if (0 != rc)
-		return -1;
+	if (ret > 0) {
+		int ethaddr_size;
+		char ethaddr_string[18];
+		unsigned char ethaddr[6];
+		char *string;
+		char *endp;
 
-	if (1 == value) {
 		ethaddr_size = getenv_r("ethaddr",
 					ethaddr_string, sizeof(ethaddr_string));
 
@@ -960,316 +926,171 @@ acp_osg_update_dt(void *input, int group)
 					  "mac-address", (void *)ethaddr,
 					  (sizeof(unsigned char) * 6), 1);
 
-		if (0 != rc)
-			rc = fdt_find_and_setprop(dt, "/plb/opb/femac0",
-						  "mac-address", (void *)ethaddr,
-						  (sizeof(unsigned char) * 6), 1);
-
 		if (0 != rc) {
 			printf("Error setting up the FEMAC.\n");
 			return -1;
 		}
 	}
 
-	/* PEI0 */
-
-	if (0 != acp_osg_group_get_res(group, ACP_OS_PCIE0))
-		value = 1;
-	else
-		value = 0;
-
-	rc = fdt_find_and_setprop(dt, "/pciex@f00c0000",
-				  "enabled", (void *)&value,
-				  sizeof(unsigned long), 1);
-
-	if (0 != rc) {
-		rc = fdt_find_and_setprop(dt, "/pei0",
-					  "enabled", (void *)&value,
-					  sizeof(unsigned long), 1);
-		rc |= fdt_find_and_setprop(dt, "/pei0",
-					   "status", (void *)status[value],
-					   strlen(status[value]) + 1, 1);
-	}
-
-	if (0 != rc)
+	ret = acp_osg_update_dt_device_status(dt, group, ACP_OS_PCIE0);
+	if (ret < 0)
 		return -1;
 
-	if (0 > (nodeoffset = fdt_path_offset(dt, "/pciex@f00c0000")))
-		if (0 > (nodeoffset = fdt_path_offset(dt, "/pei0")))
-			return -1;
+	if (ret > 0) {
+		int nodeoffset;
+		const struct fdt_property *property;
+		unsigned long *dma_ranges;
 
-	if (NULL == (property = fdt_get_property(dt, nodeoffset,
-						 "dma-ranges", NULL)))
-		return -1;
+		if (0 > (nodeoffset = fdt_path_offset(dt, "/pciex@f00c0000")))
+			return -1;
 
-	dma_ranges = (unsigned long *)property->data;
-	dma_ranges[6] = (acp_osg_group_get_res(group, ACP_OS_SIZE) * 1024 * 1024);
+		if (NULL == (property = fdt_get_property(dt, nodeoffset,
+							 "dma-ranges", NULL)))
+			return -1;
 
-	rc = fdt_find_and_setprop(dt, "/pciex@f00c0000",
-				  "dma-ranges", (void *)dma_ranges,
-				  (sizeof(unsigned long) * 7), 1);
+		dma_ranges = (unsigned long *)property->data;
+		dma_ranges[6] = (acp_osg_group_get_res(group, ACP_OS_SIZE) *
+				 1024 * 1024);
 
-	if (0 != rc)
-		rc = fdt_find_and_setprop(dt, "/pei0",
+		rc = fdt_find_and_setprop(dt, "/pciex@f00c0000",
 					  "dma-ranges", (void *)dma_ranges,
 					  (sizeof(unsigned long) * 7), 1);
 
-	if (0 != rc)
-		return -1;
-
-	/* If plx is set to set, enable it in the device tree. */
-
-	if (0 != acp_osg_group_get_res(group, ACP_OS_PLX))
-		value = 1;
-	else
-		value = 0;
-
-	rc = fdt_find_and_setprop(dt, "/pciex@f00c0000",
-				  "plx", (void *)&value,
-				  sizeof(unsigned long), 1);
-
-	if (0 != rc)
-		rc = fdt_find_and_setprop(dt, "/pei0",
-					  "plx", (void *)&value,
-					  sizeof(unsigned long), 1);
-
-	if (0 != rc)
-		return -1;
+		if (0 != rc)
+			return -1;
 
-	/* PEI1 */
+		/*
+		  If plx is set to set, enable it in the device tree.
+		*/
 
-	if (0 != acp_osg_group_get_res(group, ACP_OS_PCIE1))
-		value = 1;
-	else
-		value = 0;
+		if (0 != acp_osg_group_get_res(group, ACP_OS_PLX)) {
+			value = 1;
 
-	rc = fdt_find_and_setprop(dt, "/pciex@f00c8000",
-				  "enabled", (void *)&value,
-				  sizeof(unsigned long), 1);
+			rc = fdt_find_and_setprop(dt, "/pciex@f00c0000",
+						  "plx", (void *)&value,
+						  sizeof(unsigned long), 1);
 
-	if (0 != rc) {
-		rc = fdt_find_and_setprop(dt, "/pei1",
-					  "enabled", (void *)&value,
-					  sizeof(unsigned long), 1);
-		rc |= fdt_find_and_setprop(dt, "/pei1",
-					   "status", (void *)status[value],
-					   strlen(status[value]) + 1, 1);
+			if (0 != rc)
+				return -1;
+		}
 	}
 
-	if (0 != rc)
+	ret = acp_osg_update_dt_device_status(dt, group, ACP_OS_PCIE1);
+	if (ret < 0)
 		return -1;
 
-	if (0 > (nodeoffset = fdt_path_offset(dt, "/pciex@f00c8000")))
-		if (0 > (nodeoffset = fdt_path_offset(dt, "/pei1")))
-			return -1;
+	if (ret > 0) {
+		int nodeoffset;
+		const struct fdt_property *property;
+		unsigned long *dma_ranges;
 
-	if (NULL == (property = fdt_get_property(dt, nodeoffset,
-						 "dma-ranges", NULL)))
-		return -1;
+		if (0 > (nodeoffset = fdt_path_offset(dt, "/pciex@f00c8000")))
+			return -1;
 
-	dma_ranges = (unsigned long *)property->data;
-	dma_ranges[6] = (acp_osg_group_get_res(group, ACP_OS_SIZE) * 1024 * 1024);
+		if (NULL == (property = fdt_get_property(dt, nodeoffset,
+							 "dma-ranges", NULL)))
+			return -1;
 
-	rc = fdt_find_and_setprop(dt, "/pciex@f00c8000",
-				  "dma-ranges", (void *)dma_ranges,
-				  (sizeof(unsigned long) * 7), 1);
+		dma_ranges = (unsigned long *)property->data;
+		dma_ranges[6] = (acp_osg_group_get_res(group, ACP_OS_SIZE) *
+				 1024 * 1024);
 
-	if (0 != rc)
-		rc = fdt_find_and_setprop(dt, "/pei1",
+		rc = fdt_find_and_setprop(dt, "/pciex@f00c8000",
 					  "dma-ranges", (void *)dma_ranges,
 					  (sizeof(unsigned long) * 7), 1);
 
-	if (0 != rc)
-		return -1;
-
-	/* If plx is set to set, enable it in the device tree. */
-
-	if (0 != acp_osg_group_get_res(group, ACP_OS_PLX))
-		value = 1;
-	else
-		value = 0;
-
-	rc = fdt_find_and_setprop(dt, "/pciex@f00c8000",
-				  "plx", (void *)&value,
-				  sizeof(unsigned long), 1);
-
-	if (0 != rc)
-		rc = fdt_find_and_setprop(dt, "/pei1",
-					  "plx", (void *)&value,
-					  sizeof(unsigned long), 1);
-
-	if (0 != rc)
-		return -1;
-
-#ifndef ACP_25xx
+		if (0 != rc)
+			return -1;
 
-	/* PEI2 */
+		/*
+		  If plx is set to set, enable it in the device tree.
+		*/
 
-	if (0 != acp_osg_group_get_res(group, ACP_OS_PCIE2))
-		value = 1;
-	else
-		value = 0;
+		if (0 != acp_osg_group_get_res(group, ACP_OS_PLX)) {
+			value = 1;
 
-	rc = fdt_find_and_setprop(dt, "/pciex@f00d0000",
-				  "enabled", (void *)&value,
-				  sizeof(unsigned long), 1);
+			rc = fdt_find_and_setprop(dt, "/pciex@f00c8000",
+						  "plx", (void *)&value,
+						  sizeof(unsigned long), 1);
 
-	if (0 != rc) {
-		rc = fdt_find_and_setprop(dt, "/pei2",
-					  "enabled", (void *)&value,
-					  sizeof(unsigned long), 1);
-		rc |= fdt_find_and_setprop(dt, "/pei2",
-					   "status", (void *)status[value],
-					   strlen(status[value]) + 1, 1);
+			if (0 != rc)
+				return -1;
+		}
 	}
 
-	if (0 != rc)
+#ifndef ACP_25xx
+	ret = acp_osg_update_dt_device_status(dt, group, ACP_OS_PCIE2);
+	if (ret < 0)
 		return -1;
 
-	if (0 > (nodeoffset = fdt_path_offset(dt, "/pciex@f00d0000")))
-		if (0 > (nodeoffset = fdt_path_offset(dt, "/pei2")))
-			return -1;
+	if (ret > 0) {
+		int nodeoffset;
+		const struct fdt_property *property;
+		unsigned long *dma_ranges;
 
-	if (NULL == (property = fdt_get_property(dt, nodeoffset,
-						 "dma-ranges", NULL)))
-		return -1;
+		if (0 > (nodeoffset = fdt_path_offset(dt, "/pciex@f00d0000")))
+			return -1;
 
-	dma_ranges = (unsigned long *)property->data;
-	dma_ranges[6] = (acp_osg_group_get_res(group, ACP_OS_SIZE) * 1024 * 1024);
+		if (NULL == (property = fdt_get_property(dt, nodeoffset,
+							 "dma-ranges", NULL)))
+			return -1;
 
-	rc = fdt_find_and_setprop(dt, "/pciex@f00d0000",
-				  "dma-ranges", (void *)dma_ranges,
-				  (sizeof(unsigned long) * 7), 1);
+		dma_ranges = (unsigned long *)property->data;
+		dma_ranges[6] = (acp_osg_group_get_res(group, ACP_OS_SIZE) *
+				 1024 * 1024);
 
-	if (0 != rc)
-		rc = fdt_find_and_setprop(dt, "/pei2",
+		rc = fdt_find_and_setprop(dt, "/pciex@f00d0000",
 					  "dma-ranges", (void *)dma_ranges,
 					  (sizeof(unsigned long) * 7), 1);
 
-	if (0 != rc)
-		return -1;
-
-	/* If plx is set to set, enable it in the device tree. */
+		if (0 != rc)
+			return -1;
 
-	if (0 != acp_osg_group_get_res(group, ACP_OS_PLX))
-		value = 1;
-	else
-		value = 0;
+		/*
+		  If plx is set to set, enable it in the device tree.
+		*/
 
-	rc = fdt_find_and_setprop(dt, "/pciex@f00d0000",
-				  "plx", (void *)&value,
-				  sizeof(unsigned long), 1);
+		if (0 != acp_osg_group_get_res(group, ACP_OS_PLX)) {
+			value = 1;
 
-	if (0 != rc)
-		rc = fdt_find_and_setprop(dt, "/pei2",
-					  "plx", (void *)&value,
-					  sizeof(unsigned long), 1);
+			rc = fdt_find_and_setprop(dt, "/pciex@f00d0000",
+						  "plx", (void *)&value,
+						  sizeof(unsigned long), 1);
 
-	if (0 != rc)
-		return -1;
+			if (0 != rc)
+				return -1;
+		}
+	}
 
 #endif
 
-	if (0 != acp_osg_group_get_res(group, ACP_OS_SRIO))
-		value = 1;
-	else
-		value = 0;
-
-	rc = fdt_find_and_setprop(dt, "/rapidio@f0020000",
-				  "enabled", (void *)&value,
-				  sizeof(unsigned long), 1);
-
-	if (0 != rc) {
-		rc = fdt_find_and_setprop(dt, "/srio0",
-					  "enabled", (void *)&value,
-					  sizeof(unsigned long), 1);
-		rc |= fdt_find_and_setprop(dt, "/srio0",
-					   "status", (void *)status[value],
-					   strlen(status[value]) + 1, 1);
-	}
-
-	if (0 != rc)
+	ret = acp_osg_update_dt_device_status(dt, group, ACP_OS_SRIO);
+	if (ret < 0)
 		return -1;
 
 	/* USB */
-
-	if (0 != acp_osg_group_get_res(group, ACP_OS_USB))
-		value = 1;
-	else
-		value = 0;
-
-	rc = fdt_find_and_setprop(dt, "/plb/opb/usb@004a4000",
-				  "enabled", (void *)&value,
-				  sizeof(unsigned long), 1);
-
-	if (0 != rc) {
-		rc = fdt_find_and_setprop(dt, "/plb/opb/usb0",
-					  "enabled", (void *)&value,
-					  sizeof(unsigned long), 1);
-		rc |= fdt_find_and_setprop(dt, "/plb/opb/usb0",
-					   "status", (void *)status[value],
-					   strlen(status[value]) + 1, 1);
-	}
-
-	if (0 != rc)
+	ret = acp_osg_update_dt_device_status(dt, group, ACP_OS_USB);
+	if (ret < 0)
 		return -1;
 
 #ifdef ACP_25xx
-
 	/* SBB */
-
-	if (0 != acp_osg_group_get_res(group, ACP_OS_SBB))
-		value = 1;
-	else
-		value = 0;
-
-	rc = fdt_find_and_setprop(dt, "/plb/opb/sbb0",
-				  "enabled", (void *)&value,
-				  sizeof(unsigned long), 1);
-	rc |= fdt_find_and_setprop(dt, "/plb/opb/sbb0",
-				   "status", (void *)status[value],
-				   strlen(status[value]) + 1, 1);
-
-	if (0 != rc)
+	ret = acp_osg_update_dt_device_status(dt, group, ACP_OS_SBB);
+	if (ret < 0)
 		return -1;
-
 #endif
 
 	/* SSP */
-
-	if (0 != acp_osg_group_get_res(group, ACP_OS_SSP))
-		value = 1;
-	else
-		value = 0;
-
-	rc = fdt_find_and_setprop(dt, "/plb/opb/ssp0",
-				  "enabled", (void *)&value,
-				  sizeof(unsigned long), 1);
-	rc |= fdt_find_and_setprop(dt, "/plb/opb/ssp0",
-				   "status", (void *)status[value],
-				   strlen(status[value]) + 1, 1);
-
-	if (0 != rc)
+	ret = acp_osg_update_dt_device_status(dt, group, ACP_OS_SSP);
+	if (ret < 0)
 		return -1;
 
 	/* I2C */
-
-	if (0 != acp_osg_group_get_res(group, ACP_OS_I2C))
-		value = 1;
-	else
-		value = 0;
-
-	rc = fdt_find_and_setprop(dt, "/plb/opb/i2c0",
-				  "enabled", (void *)&value,
-				  sizeof(unsigned long), 1);
-	rc |= fdt_find_and_setprop(dt, "/plb/opb/i2c0",
-				   "status", (void *)status[value],
-				   strlen(status[value]) + 1, 1);
-
-	if (0 != rc)
+	ret = acp_osg_update_dt_device_status(dt, group, ACP_OS_I2C);
+	if (ret < 0)
 		return -1;
 
-	return rc;
+	return 0;
 }
 
 /*
-- 
1.7.9.5

